#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('aws-testserver:server');
var http = require('http');
const WebSocket = require('ws');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const wss = new WebSocket.Server({ server });


wss.on('connection', (ws) => {
  console.log('有 WebSocket 連線進來');
  ws.on('message', (message) => {
    // console.log("收到訊息: ", message);
    try {
      const parsed = JSON.parse(message);
      const { filename, data } = parsed;

      if (!filename || !data) {
        return ws.send(JSON.stringify({ error: '缺少檔名或資料' }));
      }
      const ext = path.extname(filename);
      const allowed = ['.jpg', '.jpeg', '.png', '.gif', '.pdf', '.doc', '.docx'];
      if(!allowed.includes(ext.toLowerCase())) {
        ws.send(JSON.stringify({ error: '不允許的副檔名' }));
      }
      
      const buffer = Buffer.from(data, 'base64');
      const safeFilename = safeFileName(filename)
      const savePath = path.join(__dirname, '../routes/uploads', safeFilename);

      fs.writeFile(savePath, buffer, (err) => {
        if (err) {
          console.error(err);
          ws.send(JSON.stringify({ error: '寫入失敗' }));
        } else {
          ws.send(JSON.stringify({ message: '檔案儲存成功', filename: safeFilename }));
        }
      });
    } catch (err) {
      console.log('err=', err)
      ws.send(JSON.stringify({ error: 'JSON 格式錯誤' }));
    }
  });

  ws.send('WebSocket 已連線');
});

function safeFileName(originalName) {
  const extension = path.extname(originalName);  // 取得副檔名
  const safeName = crypto.randomBytes(16).toString('hex') + extension;  // 生成隨機檔案名稱
  return safeName;
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
